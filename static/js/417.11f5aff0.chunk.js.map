{"version":3,"file":"static/js/417.11f5aff0.chunk.js","mappings":"sOAEaA,E,OAAeC,EAAAA,IAAH,yC,kBCInBC,EAAU,IAAIC,EAAAA,EAEL,SAASC,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,IAAU,WAAtBD,QASR,OAPAE,EAAAA,EAAAA,YAAU,WACRV,EACGW,cAAcH,GACdI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcR,EAAUQ,EAAKC,KAA7B,IACLC,MAAMR,EACV,GAAE,CAACC,IAEDF,GACM,uBAAIA,KAIX,0BACqB,IAAlBF,EAAOY,SACN,oFAEDZ,EAAOa,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,aAAcC,EAAS,EAATA,GACjC,OACE,2BACE,SAACtB,EAAD,CACEuB,IAAKH,EACLI,IACEH,EAAY,6CAC8BA,GACtCI,KAGR,uBAAIL,MATGE,EAYZ,MAGN,C,qDCzCKnB,EAAAA,WACJ,cAAe,eACbuB,KAAKxB,QAAUyB,EAAAA,EAAAA,OAAa,CAC1BC,QANW,gCAOXC,OAAQ,CAAEC,QANA,mCAMkBC,MAAO,KAEtC,CAqBA,OArBA,yCAED,WACE,OAAOL,KAAKxB,QAAQ8B,IAAI,qBACzB,6BAED,SAAaV,GACX,OAAOI,KAAKxB,QAAQ8B,IAAb,gBAA0BV,GAClC,8BAED,SAAcA,GACZ,OAAOI,KAAKxB,QAAQ8B,IAAb,gBAA0BV,EAA1B,YACR,+BAED,SAAeA,GACb,OAAOI,KAAKxB,QAAQ8B,IAAb,gBAA0BV,EAA1B,YACR,iCAED,SAAiBS,GAEf,OADAL,KAAKxB,QAAQ+B,SAASJ,OAAOE,MAAQA,EAC9BL,KAAKxB,QAAQ8B,IAAI,eACzB,OA3BG7B,GA8BN,K","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","service/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorPicture = styled.img`\n  width: 180px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'service/api';\nimport { ActorPicture } from './Cast.styled';\nimport defaultPicture from 'components/default-image.jpg';\n\nconst service = new API();\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams('movieId');\n\n  useEffect(() => {\n    service\n      .getActorsById(movieId)\n      .then(({ data }) => setActors(data.cast))\n      .catch(setError);\n  }, [movieId]);\n\n  if(error) {\n    return <p>{error}</p>\n  }\n\n  return (\n    <ul>\n      {actors.length === 0 && (\n        <li>We don't have any information about cast for this movie</li>\n      )}\n      {actors.map(({ name, profile_path, id }) => {\n        return (\n          <li key={id}>\n            <ActorPicture\n              alt={name}\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/original${profile_path}`\n                  : defaultPicture\n              }\n            />\n            <p>{name}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '79fb62b7e77dc5ee41dd0c1332d74198';\n\nclass API {\n  constructor() {\n    this.service = axios.create({\n      baseURL: BASE_URL,\n      params: { api_key: API_KEY, query: '' },\n    });\n  }\n\n  getTrendingMovies() {\n    return this.service.get('trending/movie/day');\n  }\n\n  getMovieById(id) {\n    return this.service.get(`movie/${id}`);\n  }\n\n  getActorsById(id) {\n    return this.service.get(`movie/${id}/credits`);\n  }\n\n  getReviewsById(id) {\n    return this.service.get(`movie/${id}/reviews`);\n  }\n\n  getMoviesByTitle(query) {\n    this.service.defaults.params.query = query;\n    return this.service.get('search/movie')\n  }\n}\n\nexport default API;\n"],"names":["ActorPicture","styled","service","API","Cast","useState","actors","setActors","error","setError","movieId","useParams","useEffect","getActorsById","then","data","cast","catch","length","map","name","profile_path","id","alt","src","defaultPicture","this","axios","baseURL","params","api_key","query","get","defaults"],"sourceRoot":""}